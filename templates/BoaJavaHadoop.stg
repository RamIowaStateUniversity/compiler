Job(name, staticDeclarations, staticStatements, statements) ::= <<
package boa;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.util.ReflectionUtils;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

public class <name> {
	<staticDeclarations>
	static File file;
	static BufferedWriter bw;

	<if(staticStatements)>
	{
		<staticStatements>
	}
	
	<endif>
	public void map(final boa.types.Toplevel.Project _input) throws Exception {
		<statements:{s | <s><\n>}>	}
	
	public static void main(String args[]) throws Exception{
		<name> _job_0 = new <name>();
		file = new File(args[1]);
		if (!file.exists()) {
			file.createNewFile();
		}
		FileWriter fw = new FileWriter(file.getAbsoluteFile());
		bw = new BufferedWriter(fw);


		org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();
		Path path = new Path(args[0]);
		FileSystem fs;
		SequenceFile.Reader sequenceFileReader = null;

		try {
			fs = FileSystem.get(conf);
			sequenceFileReader = new SequenceFile.Reader(fs, path, conf);
		} catch (IOException e) {
			System.out.println("Exception occured in Program node while creating FileSystem or Reader");
		}
		System.out.println("Class of ----+>" + sequenceFileReader.getKeyClass());
		org.apache.hadoop.io.Text key = (org.apache.hadoop.io.Text) ReflectionUtils
				.newInstance(sequenceFileReader.getKeyClass(), conf);
		org.apache.hadoop.io.BytesWritable keyValue = (org.apache.hadoop.io.BytesWritable) ReflectionUtils
				.newInstance(sequenceFileReader.getValueClass(), conf);

		boa.types.Toplevel.Project _input = null;

		try {

			while(sequenceFileReader.next(key, keyValue)) {
				_input = boa.types.Toplevel.Project
						.parseFrom(com.google.protobuf.CodedInputStream
								.newInstance(keyValue.getBytes(), 0,
										keyValue.getLength()));
				_job_0.map(_input);
			}
		} catch (Exception e) {
			System.out.println("Exception occured in Program node while reading projectr");
			e.printStackTrace();
		}
		finally {
			bw.close();
		}
	}
}

>>

EmitStatement(indices, id, job, expression, weight) ::= "bw.write(<if(indices)><indices:{idx | \"[\" + (<idx>) + \"]\"}; separator=\" + \"> <endif><if(!indices)> <id>+\"[]\"<endif>+\"=\"+ <expression><if(weight)>, <weight><endif>+\"\n\");<\n>"
