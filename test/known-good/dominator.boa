m: output collection[string][int] of string;
mt: output collection[int] of string;
p: Project = input;

# program analysis output
type T= {dom: set of string, dummy : int};

# cfg of the current method
cfg: CFG;

#set of all cfgnode ids
cfgnode_ids:set of string;
pcount := 0;
method_name : string;
t_ttime0 : int;

t_ttime : int;
t_ttime1 : int;
t_ttime2 : int;
t_ttime3 : int;
no_fixp := 0;

# traversal to collect all cfgnode ids
allnode_ids := traversal(node: CFGNode) : string{
	add(cfgnode_ids, string(node.id));
	return string(node.id);
};

# traversal that constructs dominator set of cfg node
cfg_dom := traversal(node: CFGNode): T {
	cur_value : T;
	if(node.id==0) {
			self_dom:set of string;
			cur_value = {self_dom, 0};
	}
	else
		cur_value = {setClone(cfgnode_ids), 0};
	if(def(getValue(node))) {
		cur_val1 := getValue(node);
		cur_value = clone(cur_val1);
	}
	preds:=node.predecessors;
	foreach(i:int;def(preds[i])) {
		pred_value := getValue(preds[i]);
		if(def(pred_value)) {
			cur_value.dom = intersection(cur_value.dom,pred_value.dom);
		}
	}	
	gen_kill := getValue(node, allnode_ids);
	add(cur_value.dom, gen_kill);
	return cur_value;
};

# print results
dom_result := traversal(node: CFGNode) {
	cur_value := getValue(node, cfg_dom);
	if(def(cur_value))
		m["df"][node.id] << string(cur_value.dom);
};

# user-defined fix point function that is used for analysis termination.
fixp1 := fixp(curr, prev: T) : bool {
 	if (difference(curr.dom, prev.dom) == 0)
 		return true;	
 	return false;
};

q_all := visitor {
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: Method -> {
		ttime := currentTime();
		clear(allnode_ids);clear(cfgnode_ids);clear(cfg_dom);
		cfg = getcfg(node);
		no_fixp = 0;
		t_ttime0 = currentTime() - ttime;
		ttime = currentTime();
		traverse(cfg, TraversalDirection.FORWARD, TraversalKind.DFS, allnode_ids);
		traverse(cfg, TraversalDirection.FORWARD, TraversalKind.DFS, cfg_dom, fixp1);
		t_ttime = currentTime() - ttime;
		traverse(cfg, TraversalDirection.FORWARD, TraversalKind.SHALLOW_ITERATIVE, dom_result);
	}
};

visit(p, q_all);
