m: output collection[string][string][int] of int;
mt: output collection[int] of string;
accuracy : output collection of int;
mt1: output collection[string][int] of string;
p: Project = input;

# program analysis output
type Tloop = {start : int, end : int, use : set of string};
type finiteLoop = {start : int, end : int};
# cfg of the current method
cfg: CFG;
pcount := 0;
# current visiting cfg node
cur_cfg_node: CFGNode;
t_ttime0 : int;

genset : set of string;
killset : set of string;
totalTime : int;
time1 : int;
tottime := 0;
t_ttime : int;
t_ttime1 : int;
t_ttime2 : int;
t_ttime3 : int;
no_fixp := 0;
count :=0;
stack_case : stack of int;
project_name : string;
loops : set of Tloop;
loops1 : set of Tloop;
loops2 : set of Tloop;
loops3 : set of Tloop;
finiteloops : set of finiteLoop;
finiteloops1 : set of finiteLoop;
finiteloops2 : set of finiteLoop;
finiteloops3 : set of finiteLoop;
endId : int;

# traversal that gets all variable uses in a method
init := traversal(node: CFGNode){
	no_fixp = no_fixp+1;
	init_set : set of string;
	cur_val : Tloop = {-1, -1, init_set};
	if(node.name == "WHILE" || node.name == "FOR") {
		succs := node.successors;
		foreach(succ:CFGNode=succs) {
			if(succ.id > node.id + 1) {
				cur_val.start= int(node.id);
				cur_val.end= int(succ.id);
				cur_val.use = node.useVariables;
				add(loops, cur_val);
			}		
		}
	}
};

# traversal that gets all variable uses in a method
init1 := traversal(node: CFGNode){
	init_set : set of string;
	cur_val : Tloop = {-1, -1, init_set};
	if(node.name == "WHILE" || node.name == "FOR") {
		succs := node.successors;
		foreach(succ:CFGNode=succs) {
			if(succ.id > node.id + 1) {
				cur_val.start= int(node.id);
				cur_val.end= int(succ.id);
				cur_val.use = node.useVariables;
				add(loops1, cur_val);
			}		
		}
	}
};

# traversal that gets all variable uses in a method
init2 := traversal(node: CFGNode){
	init_set : set of string;
	cur_val : Tloop = {-1, -1, init_set};
	if(node.name == "WHILE" || node.name == "FOR") {
		succs := node.successors;
		foreach(succ:CFGNode=succs) {
			if(succ.id > node.id + 1) {
				cur_val.start= int(node.id);
				cur_val.end= int(succ.id);
				cur_val.use = node.useVariables;
				add(loops2, cur_val);
			}		
		}
	}
};

# traversal that gets all variable uses in a method
init3 := traversal(node: CFGNode){
	init_set : set of string;
	cur_val : Tloop = {-1, -1, init_set};
	if(node.name == "WHILE" || node.name == "FOR") {
		succs := node.successors;
		foreach(succ:CFGNode=succs) {
			if(succ.id > node.id + 1) {
				cur_val.start= int(node.id);
				cur_val.end= int(succ.id);
				cur_val.use = node.useVariables;
				add(loops3, cur_val);
			}		
		}
	}
};

# traversal that accumulates generated values
cfg_def := traversal(node: CFGNode) {
	foreach(temp:Tloop=loops) {
		if(node.id > temp.start && node.id < temp.end) {
			foreach(tmp_use:string=temp.use) {
				if(node.defVariables!="") {
					if(tmp_use == node.defVariables) {
						f : finiteLoop = {temp.start, temp.end};
						add(finiteloops, f);
					}
				}
			}
		}
	}
};

# traversal that accumulates generated values
cfg_def1 := traversal(node: CFGNode) {
	foreach(temp:Tloop=loops1) {
		if(node.id > temp.start && node.id < temp.end) {
			foreach(tmp_use:string=temp.use) {
				if(node.defVariables!="") {
					if(tmp_use == node.defVariables) {
						f : finiteLoop = {temp.start, temp.end};
						add(finiteloops1, f);
					}
				}
			}
		}
	}
};
# traversal that accumulates generated values
cfg_def2 := traversal(node: CFGNode) {
	foreach(temp:Tloop=loops2) {
		if(node.id > temp.start && node.id < temp.end) {
			foreach(tmp_use:string=temp.use) {
				if(node.defVariables!="") {
					if(tmp_use == node.defVariables) {
						f : finiteLoop = {temp.start, temp.end};
						add(finiteloops2, f);
					}
				}
			}
		}
	}
};
# traversal that accumulates generated values
cfg_def3 := traversal(node: CFGNode) {
	foreach(temp:Tloop=loops2) {
		if(node.id > temp.start && node.id < temp.end) {
			foreach(tmp_use:string=temp.use) {
				if(node.defVariables!="") {
					if(tmp_use == node.defVariables) {
						f : finiteLoop = {temp.start, temp.end};
						add(finiteloops3, f);
					}
				}
			}
		}
	}
};
q_all := visitor {
	before node: Project -> {
		pcount = pcount + 1;
		if(pcount > 601) {
			stop;
		}
	}
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: Method -> {
			ttime := currentTime();

			no_fixp = 0;
			clear(loops);clear(loops1);clear(loops2);clear(loops3);
			clear(finiteloops);clear(finiteloops1);clear(finiteloops2);clear(finiteloops3);
			cfg = getcfg(node);
			clear(init);clear(init1);clear(init2);clear(init3);clear(cfg_def);clear(cfg_def1);clear(cfg_def2);clear(cfg_def3);
			t_ttime0 = currentTime() - ttime;
			ttime = currentTime();
			traverse(cfg, TraversalKind.DFS, init3);
			traverse(cfg, TraversalKind.DFS, cfg_def3);
			t_ttime = currentTime() - ttime;
			ttime = currentTime();
			traverse(cfg, TraversalKind.POSTORDER, init);
			traverse(cfg, TraversalKind.POSTORDER, cfg_def);
			t_ttime1 = currentTime() - ttime;
			ttime = currentTime();
			traverse(cfg, TraversalKind.WORKLIST, init1);
			traverse(cfg, TraversalKind.WORKLIST, cfg_def1);
			t_ttime2 = currentTime() - ttime;
			ttime = currentTime();
			traverse(cfg, TraversalKind.MIX, init2);
			traverse(cfg, TraversalKind.SHALLOW_ITERATIVE, cfg_def2);
			t_ttime3 = currentTime() - ttime;

			#mt[1] << string(loops);
			#mt[1] << string(finiteloops);
	}
	after node: Method -> {
		if(no_fixp!=0 && len(cfg.nodes)>2) {
				if(cfg.isLoopPresent && len(cfg.nodes)<201) {
					mt[len(cfg.nodes)] << "l,"+string(t_ttime0+t_ttime)+","+string(t_ttime0+t_ttime1)+","+string(t_ttime0+t_ttime2)+","+string(t_ttime0+t_ttime3);
				}
				else if(cfg.isBranchPresent) {
					mt[len(cfg.nodes)] << "b,"+string(t_ttime0+t_ttime)+","+string(t_ttime0+t_ttime1)+","+string(t_ttime0+t_ttime2)+","+string(t_ttime0+t_ttime3);
				}
				else {
					mt[len(cfg.nodes)] << "s,"+string(t_ttime0+t_ttime)+","+string(t_ttime0+t_ttime1)+","+string(t_ttime0+t_ttime2)+","+string(t_ttime0+t_ttime3);
}
				#tottime = tottime + time1;
		}
	}

};

visit(p, q_all);
